from Crypto.Util.number import long_to_bytes, bytes_to_long, getPrime
flag = b"vgucypher{FAKE_FLAG}"
plaintext = bytes_to_long(flag)
p = getPrime(512) # This is unknown
q = getPrime(512) # This is unknown
e = 0x10001
n = p * q
ciphertext = pow(plaintext, e, p* q) # c = m^e mod n
d = pow(e, -1, (p - 1) * (q - 1)) # d = e^-1 mod phi(n)

decrypted_ciphertext = pow(ciphertext, d, p * q)
assert decrypted_ciphertext == plaintext
print(long_to_bytes(decrypted_ciphertext))

ciphertext_orginal="108817996478875962748807685195898839235131415400466830502524210777425827093704229959538255915222443323086499960850671889776307310138913352257135472558586384613496645120303258236012657365786485202270513426542985835132081706816259242122683220830902241445129137922342680575714428880320859445026342129240966744206"
n_orginal="117378567124716236236044558241107806605736253057406303459584977215087315697749662980445901987640185615597015856640181841784590874624712744033616578986059075120813449396552360882943977036587199937478038256465488814670708953070327618634265180619676128267728587071877304192349209279829117836107480980367456989279"
print(len(ciphertext_orginal) == len(str(ciphertext)))
print(len(n_orginal) == len(str(n)))